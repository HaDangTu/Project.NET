@model MotelManagement.ViewModels.InvoiceViewModel
@using MotelManagement.Utility;
@{
    ViewBag.Title = "CollectRoomInvoice";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2>Thu tiền phòng</h2>


@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div>
        @*<h4>InvoiceViewModel</h4>*@
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })

        <h5>@Model.RoomName</h5>
        <div>
            @Html.EditorFor(model => model.RoomID,
            new { htmlAttributes = new { @hidden="hidden" } } )
            @Html.EditorFor(model => model.RoomName,
                 new { htmlAttributes = new { @hidden="hidden" } } )
        </div>
       

        <div class="form-row">
            <div class="col-1">
                @Html.LabelFor(model => model.FromDate, htmlAttributes: new { @class = "font-weight-bold" })
            </div>
            <div class="col-1" id="from-date">
                <span id="from-date-text">
                    @Model.FromDate.ToString("dd-MM-yyyy")
                </span>
                @Html.EditorFor(model => model.FromDate,
               new { htmlAttributes = new { @id = "from-date", @hidden="hidden" } } )
            </div>
            <div class="col-1"></div>
            <div class="col-1">
                @Html.LabelFor(model => model.ToDate, htmlAttributes: new { @class = "font-weight-bold" })
            </div>
            <div class="col-1">
                <span id="to-date-text">
                    @Model.ToDate.ToString("dd-MM-yyyy")
                </span>
                @Html.EditorFor(model => model.ToDate,
               new { htmlAttributes = new { @id = "to-date", @hidden = "hidden" } } )
            </div>
        </div>

        <div class="form-row mt-2">
            @Html.LabelFor(model => model.CollectionDate, htmlAttributes: new { @class = "font-weight-bold col-2" })
            <div class="col-4">
                @Html.EditorFor(model => model.CollectionDate, new { htmlAttributes = new { @class = "form-control" } })
            </div>
        </div>

        <div class="form-row mt-2">
            @Html.LabelFor(model => model.Debt, htmlAttributes: new { @class = "font-weight-bold col-2" })
            <p class="text-danger col-4">
                <span id="debt-text">
                    @Model.Debt
                </span> VND
            </p>
            <div class="col-4">
                @Html.EditorFor(model => model.Debt,
               new { htmlAttributes = new { @class = "form-control", @id = "debt", @hidden="hidden" } })
            </div>
        </div>

        <div class="form-row mt-2">
            @Html.LabelFor(model => model.Proceeds, htmlAttributes: new { @class = "font-weight-bold col-2" })
            <div class="col-4">
                @Html.EditorFor(model => model.Proceeds, new { htmlAttributes = new { @class = "form-control", @id = "proceeds" } })
            </div>
        </div>

        <div class="form-row mt-2">
            @Html.LabelFor(model => model.ExcessCash, htmlAttributes: new { @class = "font-weight-bold col-2" })
            <p class="text-success col-4">
                <span id="excess-cash-text">
                    @Model.ExcessCash
                </span> VND
            </p>
            <div class="col-4">
                @Html.EditorFor(model => model.ExcessCash,
               new { htmlAttributes = new { @class = "form-control", @id = "excess-cash", @hidden="hidden" } })
            </div>
        </div>


        <div class="form-row mt-4">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Xuất hóa đơn" class="btn btn-primary" />
            </div>
        </div>
    </div>
}

@*<div>
        @Html.ActionLink("Back to List", "Index")
    </div>*@

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    <script type="text/javascript">
        $("document").ready(function () {
            $("#proceeds").keyup(function (e) {
                var value = $(e.target).val();

                value = value.replace(/[A-Za-z]|[!#$%^&*(),.?":{}|<>]/g, "");
                if (value == "") value = "0";

                var money = parseInt(value);
                var debt = parseInt(@Model.Debt.Replace(",", ""));

                debt = debt - money;

                $("#proceeds").val(money.toLocaleString("en-US"));
                $("#debt-text").text(debt < 0 ? "0" : debt.toLocaleString("en-US"));
                $("#debt").val(debt < 0 ? "0" : debt.toLocaleString("en-US"));
                $("#excess-cash-text").text(debt < 0 ? (-debt).toLocaleString("en-US") : "0");
                $("#excess-cash").val(debt < 0 ? (-debt).toLocaleString("en-US") : "0");
            });

            setTimeout(function () {
                $(".close").click();
            }, 10000);
        });
    </script>
}
